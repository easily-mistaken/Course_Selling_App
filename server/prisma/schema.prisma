// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Creator {
  id        String      @id @default(uuid())
  name      String
  email     String   @unique
  password  String

  courses   Course[]
}

model User {
  id        String      @id @default(uuid())
  name      String
  email     String  @unique
  password  String

  purchases Purchase[]
}

model Course {
  id          String      @id @default(uuid())
  title       String
  description String
  price       Float
  imageUrl     String
  isUploaded  Boolean @default(true)

  creatorId String
  creator   Creator @relation(fields: [creatorId], references: [id])

  purchases Purchase[]

  courseFolders CourseFolder[]
}


model CourseFolder {
  id          String      @id @default(uuid())
  title       String
  courseId String 
  course Course @relation(fields: [courseId], references: [id])

  @@unique([courseId, title])

  courseContents CourseContent[]
}

model CourseContent {
  id          String      @id @default(uuid())
  title       String
  contentUrl  String

  courseFolderId String
  courseFolder CourseFolder @relation(fields: [courseFolderId], references: [id])

  isUploaded Boolean @default(true)
  @@unique([courseFolderId, title])
}

model Progress {
  id              String        @id @default(uuid())
  completed       Boolean       @default(false)
  lastAccessedAt  DateTime      @default(now())
  
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  
  courseId        String
  course          Course        @relation(fields: [courseId], references: [id])
  
  contentId       String
  content         CourseContent @relation(fields: [contentId], references: [id])

  @@unique([userId, contentId])
}
model Purchase {
  id          String      @id @default(uuid())

  userId   String
  user     User  @relation(fields: [userId], references: [id])

  courseId      String
  course Course @relation(fields: [courseId], references: [id])
}
