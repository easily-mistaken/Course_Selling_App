// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  subdomain String   @unique
  courses   Course[] // One-to-many relationship with courses
  students  Student[] // One-to-many relationship with students
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id        Int      @id @default(autoincrement())
  email     String
  password  String
  adminId   Int      // Linked to a specific admin
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  purchases Purchase[] // One-to-many relationship with purchases
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Float
  adminId     Int      // Linked to the creator (admin)
  admin       Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  purchases   Purchase[] // Track which students bought this course
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Purchase {
  id          Int      @id @default(autoincrement())
  studentId   Int      // Linked to the student
  courseId    Int      // Linked to the course
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  purchaseDate DateTime @default(now())
}
