// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Creator {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  password    String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  courses     Course[]
}

model User {
  id          String     @id @default(uuid())
  name        String     @default("Unknown")
  email       String     @unique
  password    String

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  avatarUrl   String?    // Optional profile picture
  bio         String?    // Optional bio

  purchases   Purchase[]

  // Add progress tracking
  progress    Progress[]
}

model Course {
  id              String          @id @default(uuid())
  title           String
  description     String
  price           Float
  imageUrl        String          // Cover image for the course
  isPublished     Boolean         @default(false)

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  creatorId       String
  creator         Creator         @relation(fields: [creatorId], references: [id])
  
  purchases       Purchase[]
  courseFolders   CourseFolder[]
  progress        Progress[]      // Track progress for each user
}

model CourseFolder {
  id              String          @id @default(uuid())
  title           String
  description     String?         // Optional description
  createdAt       DateTime        @default(now())
  
  courseId        String
  course          Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  courseContents  CourseContent[]

  @@unique([courseId, title])
}

model CourseContent {
  id              String        @id @default(uuid())
  title           String
  description     String?       // Optional description
  contentUrl      String
  duration        Int?          // Duration in seconds for video content
  type            ContentType   // Video, PDF, etc.
  isPublished     Boolean       @default(false)
  createdAt       DateTime      @default(now())
  
  courseFolderId  String
  courseFolder    CourseFolder  @relation(fields: [courseFolderId], references: [id], onDelete: Cascade)
  
  progress        Progress[]    // Track progress for each user

  @@unique([courseFolderId, title])
}

model Purchase {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  amount      Float     // Store the actual purchase amount
  
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])  // Prevent duplicate purchases
}

model Progress {
  id              String        @id @default(uuid())
  completed       Boolean       @default(false)
  lastAccessedAt  DateTime      @default(now())
  
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  
  courseId        String
  course          Course        @relation(fields: [courseId], references: [id])
  
  contentId       String
  content         CourseContent @relation(fields: [contentId], references: [id])

  @@unique([userId, contentId])
}

enum ContentType {
  VIDEO
  PDF
  DOCUMENT
  QUIZ
}
